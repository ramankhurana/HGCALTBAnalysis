from ROOT import TFile, TTree, TH1F, TH1D, TH1, TCanvas, TChain,TGraphAsymmErrors, TMath, TH2D, TLorentzVector, AddressOf, gROOT, TH2F
import ROOT as ROOT
import os
import sys, optparse
from array import array
import math
import numpy as numpy_
import operator
from cellInfo import *
from neighbours import *


def StripRootFileName(filepath):
    striped_path = filepath.split('/')
    print striped_path
    nparts = len(striped_path)
    return striped_path[nparts-1]

    
## generic code starts here
def makeTChain():
    timingTree = TChain(treeName)
    infile = open(textfilename)
    for ifile in infile:
        timingTree.Add(ifile.rstrip())
        outputfilename = StripRootFileName(ifile.rstrip())
    return timingTree


def defineHistograms(postfix="_"):
    TDCmap = TH2F('TDCmap'+postfix,'TDCmap'+postfix,40,-20,20, 40,-20,20)
    allhisto = {'TDCmap':TDCmap}
    
    h_TDCxVsTDCy_withoutAmpCut = TH2F('TDCxVsTDCy_withoutAmpCut','TDCxVsTDCy_withoutAmpCut',100,-30,30,100,-30,30)
    allhisto ['TDCmapNoAmpCut'] = h_TDCxVsTDCy_withoutAmpCut
    
    h_Totaltime = TH1F('h_Totaltime','h_Totaltime', 400, -1., 1.)
    allhisto['Totaltime'] = h_Totaltime

    h_Totaltime_Quad = TH1F('h_Totaltime_Quad','h_Totaltime_Quad', 400, -1., 1.)
    allhisto['Totaltime_Quad'] = h_Totaltime_Quad

    h_Totaltime_Log = TH1F('h_Totaltime_Log','h_Totaltime_Log', 400, -1., 1.)
    allhisto['Totaltime_Log'] = h_Totaltime_Log

    
    h_TDCxVsTDCy_withAmpCut=[]
    h_Timeplot=[]
    h_TimeCorrected=[]
    h2_TDCx_vs_amp=[]
    h2_TDCy_vs_amp=[]
    h2_TDCx_vs_time=[]
    h2_TDCy_vs_time=[]
        
    for icell in range(17,24):
        cellnumber = str(icell)
        
        h_TDCxVsTDCy_withAmpCut.append ( TH2F("TDCxVsTDCy_withAmpCut_"+cellnumber,"TDCxVsTDCy_withAmpCut_"+cellnumber,100,-30,30,100,-30,30) )
        allhisto ['TDCmapWithAmpCut_'+cellnumber] = h_TDCxVsTDCy_withAmpCut[icell-17]
        
        h_Timeplot.append( TH1F("TimePlot_"+cellnumber,"TimePlot_"+cellnumber,100,9.5,10.5) )
        allhisto ['time_'+cellnumber] = h_Timeplot[icell-17]
        
        h_TimeCorrected.append( TH1F('TimeCorrected_'+cellnumber, 'TimeCorrected_'+cellnumber, 100,-0.5,0.5) )
        allhisto ['timecorrected_'+cellnumber] = h_TimeCorrected[icell-17]
        
        h2_TDCx_vs_amp.append( TH2F ('h2_TDCx_vs_amp_'+cellnumber, 'h2_TDCx_vs_amp_'+cellnumber, 120, -30.0, 30.0, 100, 0.0, 1.0 ) )
        h2_TDCy_vs_amp.append( TH2F ('h2_TDCy_vs_amp_'+cellnumber, 'h2_TDCy_vs_amp_'+cellnumber, 120, -30.0, 30.0, 100, 0.0, 1.0 ) )
        
        h2_TDCx_vs_time.append( TH2F ('h2_TDCx_vs_time_'+cellnumber, 'h2_TDCx_vs_time_'+cellnumber, 120, -30.0, 30.0, 200, -1.0, 1.0 ) )
        h2_TDCy_vs_time.append( TH2F ('h2_TDCy_vs_time_'+cellnumber, 'h2_TDCy_vs_time_'+cellnumber, 120, -30.0, 30.0, 200, -1.0, 1.0 ) )
        
        allhisto['h2_TDCx_vs_amp_'+cellnumber] = h2_TDCx_vs_amp[icell-17]
        allhisto['h2_TDCy_vs_amp_'+cellnumber] = h2_TDCy_vs_amp[icell-17]
        
        allhisto['h2_TDCx_vs_time_'+cellnumber] = h2_TDCx_vs_time[icell-17]
        allhisto['h2_TDCy_vs_time_'+cellnumber] = h2_TDCy_vs_time[icell-17]

        
    return allhisto






def WriteHistograms(allhistoFilled_):
    print allhistoFilled_
    outfile_ = TFile(outputfilename,'RECREATE')
    outfile_.cd()
    for k in allhistoFilled_.keys():
        allhistoFilled_[k].Write()
        
    outfile_.Close()
    return ;


''' remove a given element from the list, provided by the variable 'index' '''
def removeElement(a,index):
    a = a[:index] + a[index+1 :]
    return a 

